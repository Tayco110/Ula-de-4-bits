// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/29/2019 16:22:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_sample_tst(
	a,
	b,
	selection,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input [2:0] selection;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or selection)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula_vlg_check_tst (
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	p7,
	p8,
	sampler_rx
);
input [6:0] p1;
input [6:0] p2;
input [6:0] p3;
input [6:0] p4;
input [6:0] p5;
input [6:0] p6;
input [6:0] p7;
input [6:0] p8;
input sampler_rx;

reg [6:0] p1_expected;
reg [6:0] p2_expected;
reg [6:0] p3_expected;
reg [6:0] p4_expected;
reg [6:0] p5_expected;
reg [6:0] p6_expected;
reg [6:0] p7_expected;
reg [6:0] p8_expected;

reg [6:0] p1_prev;
reg [6:0] p2_prev;
reg [6:0] p3_prev;
reg [6:0] p4_prev;
reg [6:0] p5_prev;
reg [6:0] p6_prev;
reg [6:0] p7_prev;
reg [6:0] p8_prev;

reg [6:0] p1_expected_prev;
reg [6:0] p2_expected_prev;
reg [6:0] p3_expected_prev;
reg [6:0] p4_expected_prev;
reg [6:0] p5_expected_prev;
reg [6:0] p6_expected_prev;
reg [6:0] p7_expected_prev;
reg [6:0] p8_expected_prev;

reg [6:0] last_p1_exp;
reg [6:0] last_p2_exp;
reg [6:0] last_p3_exp;
reg [6:0] last_p4_exp;
reg [6:0] last_p5_exp;
reg [6:0] last_p6_exp;
reg [6:0] last_p7_exp;
reg [6:0] last_p8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	p1_prev = p1;
	p2_prev = p2;
	p3_prev = p3;
	p4_prev = p4;
	p5_prev = p5;
	p6_prev = p6;
	p7_prev = p7;
	p8_prev = p8;
end

// update expected /o prevs

always @(trigger)
begin
	p1_expected_prev = p1_expected;
	p2_expected_prev = p2_expected;
	p3_expected_prev = p3_expected;
	p4_expected_prev = p4_expected;
	p5_expected_prev = p5_expected;
	p6_expected_prev = p6_expected;
	p7_expected_prev = p7_expected;
	p8_expected_prev = p8_expected;
end


// expected p1[ 6 ]
initial
begin
	p1_expected[6] = 1'bX;
end 
// expected p1[ 5 ]
initial
begin
	p1_expected[5] = 1'bX;
end 
// expected p1[ 4 ]
initial
begin
	p1_expected[4] = 1'bX;
end 
// expected p1[ 3 ]
initial
begin
	p1_expected[3] = 1'bX;
end 
// expected p1[ 2 ]
initial
begin
	p1_expected[2] = 1'bX;
end 
// expected p1[ 1 ]
initial
begin
	p1_expected[1] = 1'bX;
end 
// expected p1[ 0 ]
initial
begin
	p1_expected[0] = 1'bX;
end 
// expected p2[ 6 ]
initial
begin
	p2_expected[6] = 1'bX;
end 
// expected p2[ 5 ]
initial
begin
	p2_expected[5] = 1'bX;
end 
// expected p2[ 4 ]
initial
begin
	p2_expected[4] = 1'bX;
end 
// expected p2[ 3 ]
initial
begin
	p2_expected[3] = 1'bX;
end 
// expected p2[ 2 ]
initial
begin
	p2_expected[2] = 1'bX;
end 
// expected p2[ 1 ]
initial
begin
	p2_expected[1] = 1'bX;
end 
// expected p2[ 0 ]
initial
begin
	p2_expected[0] = 1'bX;
end 
// expected p3[ 6 ]
initial
begin
	p3_expected[6] = 1'bX;
end 
// expected p3[ 5 ]
initial
begin
	p3_expected[5] = 1'bX;
end 
// expected p3[ 4 ]
initial
begin
	p3_expected[4] = 1'bX;
end 
// expected p3[ 3 ]
initial
begin
	p3_expected[3] = 1'bX;
end 
// expected p3[ 2 ]
initial
begin
	p3_expected[2] = 1'bX;
end 
// expected p3[ 1 ]
initial
begin
	p3_expected[1] = 1'bX;
end 
// expected p3[ 0 ]
initial
begin
	p3_expected[0] = 1'bX;
end 
// expected p4[ 6 ]
initial
begin
	p4_expected[6] = 1'bX;
end 
// expected p4[ 5 ]
initial
begin
	p4_expected[5] = 1'bX;
end 
// expected p4[ 4 ]
initial
begin
	p4_expected[4] = 1'bX;
end 
// expected p4[ 3 ]
initial
begin
	p4_expected[3] = 1'bX;
end 
// expected p4[ 2 ]
initial
begin
	p4_expected[2] = 1'bX;
end 
// expected p4[ 1 ]
initial
begin
	p4_expected[1] = 1'bX;
end 
// expected p4[ 0 ]
initial
begin
	p4_expected[0] = 1'bX;
end 
// expected p5[ 6 ]
initial
begin
	p5_expected[6] = 1'bX;
end 
// expected p5[ 5 ]
initial
begin
	p5_expected[5] = 1'bX;
end 
// expected p5[ 4 ]
initial
begin
	p5_expected[4] = 1'bX;
end 
// expected p5[ 3 ]
initial
begin
	p5_expected[3] = 1'bX;
end 
// expected p5[ 2 ]
initial
begin
	p5_expected[2] = 1'bX;
end 
// expected p5[ 1 ]
initial
begin
	p5_expected[1] = 1'bX;
end 
// expected p5[ 0 ]
initial
begin
	p5_expected[0] = 1'bX;
end 
// expected p6[ 6 ]
initial
begin
	p6_expected[6] = 1'bX;
end 
// expected p6[ 5 ]
initial
begin
	p6_expected[5] = 1'bX;
end 
// expected p6[ 4 ]
initial
begin
	p6_expected[4] = 1'bX;
end 
// expected p6[ 3 ]
initial
begin
	p6_expected[3] = 1'bX;
end 
// expected p6[ 2 ]
initial
begin
	p6_expected[2] = 1'bX;
end 
// expected p6[ 1 ]
initial
begin
	p6_expected[1] = 1'bX;
end 
// expected p6[ 0 ]
initial
begin
	p6_expected[0] = 1'bX;
end 
// expected p7[ 6 ]
initial
begin
	p7_expected[6] = 1'bX;
end 
// expected p7[ 5 ]
initial
begin
	p7_expected[5] = 1'bX;
end 
// expected p7[ 4 ]
initial
begin
	p7_expected[4] = 1'bX;
end 
// expected p7[ 3 ]
initial
begin
	p7_expected[3] = 1'bX;
end 
// expected p7[ 2 ]
initial
begin
	p7_expected[2] = 1'bX;
end 
// expected p7[ 1 ]
initial
begin
	p7_expected[1] = 1'bX;
end 
// expected p7[ 0 ]
initial
begin
	p7_expected[0] = 1'bX;
end 
// expected p8[ 6 ]
initial
begin
	p8_expected[6] = 1'bX;
end 
// expected p8[ 5 ]
initial
begin
	p8_expected[5] = 1'bX;
end 
// expected p8[ 4 ]
initial
begin
	p8_expected[4] = 1'bX;
end 
// expected p8[ 3 ]
initial
begin
	p8_expected[3] = 1'bX;
end 
// expected p8[ 2 ]
initial
begin
	p8_expected[2] = 1'bX;
end 
// expected p8[ 1 ]
initial
begin
	p8_expected[1] = 1'bX;
end 
// expected p8[ 0 ]
initial
begin
	p8_expected[0] = 1'bX;
end 
// generate trigger
always @(p1_expected or p1 or p2_expected or p2 or p3_expected or p3 or p4_expected or p4 or p5_expected or p5 or p6_expected or p6 or p7_expected or p7 or p8_expected or p8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected p1 = %b | expected p2 = %b | expected p3 = %b | expected p4 = %b | expected p5 = %b | expected p6 = %b | expected p7 = %b | expected p8 = %b | ",p1_expected_prev,p2_expected_prev,p3_expected_prev,p4_expected_prev,p5_expected_prev,p6_expected_prev,p7_expected_prev,p8_expected_prev);
	$display("| real p1 = %b | real p2 = %b | real p3 = %b | real p4 = %b | real p5 = %b | real p6 = %b | real p7 = %b | real p8 = %b | ",p1_prev,p2_prev,p3_prev,p4_prev,p5_prev,p6_prev,p7_prev,p8_prev);
`endif
	if (
		( p1_expected_prev[0] !== 1'bx ) && ( p1_prev[0] !== p1_expected_prev[0] )
		&& ((p1_expected_prev[0] !== last_p1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[0] = p1_expected_prev[0];
	end
	if (
		( p1_expected_prev[1] !== 1'bx ) && ( p1_prev[1] !== p1_expected_prev[1] )
		&& ((p1_expected_prev[1] !== last_p1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[1] = p1_expected_prev[1];
	end
	if (
		( p1_expected_prev[2] !== 1'bx ) && ( p1_prev[2] !== p1_expected_prev[2] )
		&& ((p1_expected_prev[2] !== last_p1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[2] = p1_expected_prev[2];
	end
	if (
		( p1_expected_prev[3] !== 1'bx ) && ( p1_prev[3] !== p1_expected_prev[3] )
		&& ((p1_expected_prev[3] !== last_p1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[3] = p1_expected_prev[3];
	end
	if (
		( p1_expected_prev[4] !== 1'bx ) && ( p1_prev[4] !== p1_expected_prev[4] )
		&& ((p1_expected_prev[4] !== last_p1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[4] = p1_expected_prev[4];
	end
	if (
		( p1_expected_prev[5] !== 1'bx ) && ( p1_prev[5] !== p1_expected_prev[5] )
		&& ((p1_expected_prev[5] !== last_p1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[5] = p1_expected_prev[5];
	end
	if (
		( p1_expected_prev[6] !== 1'bx ) && ( p1_prev[6] !== p1_expected_prev[6] )
		&& ((p1_expected_prev[6] !== last_p1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp[6] = p1_expected_prev[6];
	end
	if (
		( p2_expected_prev[0] !== 1'bx ) && ( p2_prev[0] !== p2_expected_prev[0] )
		&& ((p2_expected_prev[0] !== last_p2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[0] = p2_expected_prev[0];
	end
	if (
		( p2_expected_prev[1] !== 1'bx ) && ( p2_prev[1] !== p2_expected_prev[1] )
		&& ((p2_expected_prev[1] !== last_p2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[1] = p2_expected_prev[1];
	end
	if (
		( p2_expected_prev[2] !== 1'bx ) && ( p2_prev[2] !== p2_expected_prev[2] )
		&& ((p2_expected_prev[2] !== last_p2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[2] = p2_expected_prev[2];
	end
	if (
		( p2_expected_prev[3] !== 1'bx ) && ( p2_prev[3] !== p2_expected_prev[3] )
		&& ((p2_expected_prev[3] !== last_p2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[3] = p2_expected_prev[3];
	end
	if (
		( p2_expected_prev[4] !== 1'bx ) && ( p2_prev[4] !== p2_expected_prev[4] )
		&& ((p2_expected_prev[4] !== last_p2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[4] = p2_expected_prev[4];
	end
	if (
		( p2_expected_prev[5] !== 1'bx ) && ( p2_prev[5] !== p2_expected_prev[5] )
		&& ((p2_expected_prev[5] !== last_p2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[5] = p2_expected_prev[5];
	end
	if (
		( p2_expected_prev[6] !== 1'bx ) && ( p2_prev[6] !== p2_expected_prev[6] )
		&& ((p2_expected_prev[6] !== last_p2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp[6] = p2_expected_prev[6];
	end
	if (
		( p3_expected_prev[0] !== 1'bx ) && ( p3_prev[0] !== p3_expected_prev[0] )
		&& ((p3_expected_prev[0] !== last_p3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[0] = p3_expected_prev[0];
	end
	if (
		( p3_expected_prev[1] !== 1'bx ) && ( p3_prev[1] !== p3_expected_prev[1] )
		&& ((p3_expected_prev[1] !== last_p3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[1] = p3_expected_prev[1];
	end
	if (
		( p3_expected_prev[2] !== 1'bx ) && ( p3_prev[2] !== p3_expected_prev[2] )
		&& ((p3_expected_prev[2] !== last_p3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[2] = p3_expected_prev[2];
	end
	if (
		( p3_expected_prev[3] !== 1'bx ) && ( p3_prev[3] !== p3_expected_prev[3] )
		&& ((p3_expected_prev[3] !== last_p3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[3] = p3_expected_prev[3];
	end
	if (
		( p3_expected_prev[4] !== 1'bx ) && ( p3_prev[4] !== p3_expected_prev[4] )
		&& ((p3_expected_prev[4] !== last_p3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[4] = p3_expected_prev[4];
	end
	if (
		( p3_expected_prev[5] !== 1'bx ) && ( p3_prev[5] !== p3_expected_prev[5] )
		&& ((p3_expected_prev[5] !== last_p3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[5] = p3_expected_prev[5];
	end
	if (
		( p3_expected_prev[6] !== 1'bx ) && ( p3_prev[6] !== p3_expected_prev[6] )
		&& ((p3_expected_prev[6] !== last_p3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp[6] = p3_expected_prev[6];
	end
	if (
		( p4_expected_prev[0] !== 1'bx ) && ( p4_prev[0] !== p4_expected_prev[0] )
		&& ((p4_expected_prev[0] !== last_p4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[0] = p4_expected_prev[0];
	end
	if (
		( p4_expected_prev[1] !== 1'bx ) && ( p4_prev[1] !== p4_expected_prev[1] )
		&& ((p4_expected_prev[1] !== last_p4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[1] = p4_expected_prev[1];
	end
	if (
		( p4_expected_prev[2] !== 1'bx ) && ( p4_prev[2] !== p4_expected_prev[2] )
		&& ((p4_expected_prev[2] !== last_p4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[2] = p4_expected_prev[2];
	end
	if (
		( p4_expected_prev[3] !== 1'bx ) && ( p4_prev[3] !== p4_expected_prev[3] )
		&& ((p4_expected_prev[3] !== last_p4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[3] = p4_expected_prev[3];
	end
	if (
		( p4_expected_prev[4] !== 1'bx ) && ( p4_prev[4] !== p4_expected_prev[4] )
		&& ((p4_expected_prev[4] !== last_p4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[4] = p4_expected_prev[4];
	end
	if (
		( p4_expected_prev[5] !== 1'bx ) && ( p4_prev[5] !== p4_expected_prev[5] )
		&& ((p4_expected_prev[5] !== last_p4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[5] = p4_expected_prev[5];
	end
	if (
		( p4_expected_prev[6] !== 1'bx ) && ( p4_prev[6] !== p4_expected_prev[6] )
		&& ((p4_expected_prev[6] !== last_p4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp[6] = p4_expected_prev[6];
	end
	if (
		( p5_expected_prev[0] !== 1'bx ) && ( p5_prev[0] !== p5_expected_prev[0] )
		&& ((p5_expected_prev[0] !== last_p5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[0] = p5_expected_prev[0];
	end
	if (
		( p5_expected_prev[1] !== 1'bx ) && ( p5_prev[1] !== p5_expected_prev[1] )
		&& ((p5_expected_prev[1] !== last_p5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[1] = p5_expected_prev[1];
	end
	if (
		( p5_expected_prev[2] !== 1'bx ) && ( p5_prev[2] !== p5_expected_prev[2] )
		&& ((p5_expected_prev[2] !== last_p5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[2] = p5_expected_prev[2];
	end
	if (
		( p5_expected_prev[3] !== 1'bx ) && ( p5_prev[3] !== p5_expected_prev[3] )
		&& ((p5_expected_prev[3] !== last_p5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[3] = p5_expected_prev[3];
	end
	if (
		( p5_expected_prev[4] !== 1'bx ) && ( p5_prev[4] !== p5_expected_prev[4] )
		&& ((p5_expected_prev[4] !== last_p5_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[4] = p5_expected_prev[4];
	end
	if (
		( p5_expected_prev[5] !== 1'bx ) && ( p5_prev[5] !== p5_expected_prev[5] )
		&& ((p5_expected_prev[5] !== last_p5_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[5] = p5_expected_prev[5];
	end
	if (
		( p5_expected_prev[6] !== 1'bx ) && ( p5_prev[6] !== p5_expected_prev[6] )
		&& ((p5_expected_prev[6] !== last_p5_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p5_exp[6] = p5_expected_prev[6];
	end
	if (
		( p6_expected_prev[0] !== 1'bx ) && ( p6_prev[0] !== p6_expected_prev[0] )
		&& ((p6_expected_prev[0] !== last_p6_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[0] = p6_expected_prev[0];
	end
	if (
		( p6_expected_prev[1] !== 1'bx ) && ( p6_prev[1] !== p6_expected_prev[1] )
		&& ((p6_expected_prev[1] !== last_p6_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[1] = p6_expected_prev[1];
	end
	if (
		( p6_expected_prev[2] !== 1'bx ) && ( p6_prev[2] !== p6_expected_prev[2] )
		&& ((p6_expected_prev[2] !== last_p6_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[2] = p6_expected_prev[2];
	end
	if (
		( p6_expected_prev[3] !== 1'bx ) && ( p6_prev[3] !== p6_expected_prev[3] )
		&& ((p6_expected_prev[3] !== last_p6_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[3] = p6_expected_prev[3];
	end
	if (
		( p6_expected_prev[4] !== 1'bx ) && ( p6_prev[4] !== p6_expected_prev[4] )
		&& ((p6_expected_prev[4] !== last_p6_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[4] = p6_expected_prev[4];
	end
	if (
		( p6_expected_prev[5] !== 1'bx ) && ( p6_prev[5] !== p6_expected_prev[5] )
		&& ((p6_expected_prev[5] !== last_p6_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[5] = p6_expected_prev[5];
	end
	if (
		( p6_expected_prev[6] !== 1'bx ) && ( p6_prev[6] !== p6_expected_prev[6] )
		&& ((p6_expected_prev[6] !== last_p6_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p6_exp[6] = p6_expected_prev[6];
	end
	if (
		( p7_expected_prev[0] !== 1'bx ) && ( p7_prev[0] !== p7_expected_prev[0] )
		&& ((p7_expected_prev[0] !== last_p7_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[0] = p7_expected_prev[0];
	end
	if (
		( p7_expected_prev[1] !== 1'bx ) && ( p7_prev[1] !== p7_expected_prev[1] )
		&& ((p7_expected_prev[1] !== last_p7_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[1] = p7_expected_prev[1];
	end
	if (
		( p7_expected_prev[2] !== 1'bx ) && ( p7_prev[2] !== p7_expected_prev[2] )
		&& ((p7_expected_prev[2] !== last_p7_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[2] = p7_expected_prev[2];
	end
	if (
		( p7_expected_prev[3] !== 1'bx ) && ( p7_prev[3] !== p7_expected_prev[3] )
		&& ((p7_expected_prev[3] !== last_p7_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[3] = p7_expected_prev[3];
	end
	if (
		( p7_expected_prev[4] !== 1'bx ) && ( p7_prev[4] !== p7_expected_prev[4] )
		&& ((p7_expected_prev[4] !== last_p7_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[4] = p7_expected_prev[4];
	end
	if (
		( p7_expected_prev[5] !== 1'bx ) && ( p7_prev[5] !== p7_expected_prev[5] )
		&& ((p7_expected_prev[5] !== last_p7_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[5] = p7_expected_prev[5];
	end
	if (
		( p7_expected_prev[6] !== 1'bx ) && ( p7_prev[6] !== p7_expected_prev[6] )
		&& ((p7_expected_prev[6] !== last_p7_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p7_expected_prev);
		$display ("     Real value = %b", p7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p7_exp[6] = p7_expected_prev[6];
	end
	if (
		( p8_expected_prev[0] !== 1'bx ) && ( p8_prev[0] !== p8_expected_prev[0] )
		&& ((p8_expected_prev[0] !== last_p8_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[0] = p8_expected_prev[0];
	end
	if (
		( p8_expected_prev[1] !== 1'bx ) && ( p8_prev[1] !== p8_expected_prev[1] )
		&& ((p8_expected_prev[1] !== last_p8_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[1] = p8_expected_prev[1];
	end
	if (
		( p8_expected_prev[2] !== 1'bx ) && ( p8_prev[2] !== p8_expected_prev[2] )
		&& ((p8_expected_prev[2] !== last_p8_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[2] = p8_expected_prev[2];
	end
	if (
		( p8_expected_prev[3] !== 1'bx ) && ( p8_prev[3] !== p8_expected_prev[3] )
		&& ((p8_expected_prev[3] !== last_p8_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[3] = p8_expected_prev[3];
	end
	if (
		( p8_expected_prev[4] !== 1'bx ) && ( p8_prev[4] !== p8_expected_prev[4] )
		&& ((p8_expected_prev[4] !== last_p8_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[4] = p8_expected_prev[4];
	end
	if (
		( p8_expected_prev[5] !== 1'bx ) && ( p8_prev[5] !== p8_expected_prev[5] )
		&& ((p8_expected_prev[5] !== last_p8_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[5] = p8_expected_prev[5];
	end
	if (
		( p8_expected_prev[6] !== 1'bx ) && ( p8_prev[6] !== p8_expected_prev[6] )
		&& ((p8_expected_prev[6] !== last_p8_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p8[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p8_expected_prev);
		$display ("     Real value = %b", p8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p8_exp[6] = p8_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [2:0] selection;
// wires                                               
wire [6:0] p1;
wire [6:0] p2;
wire [6:0] p3;
wire [6:0] p4;
wire [6:0] p5;
wire [6:0] p6;
wire [6:0] p7;
wire [6:0] p8;

wire sampler;                             

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6),
	.p7(p7),
	.p8(p8),
	.selection(selection)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b1;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 
// selection[ 2 ]
initial
begin
	repeat(12)
	begin
		selection[2] = 1'b0;
		selection[2] = #40000 1'b1;
		# 40000;
	end
	selection[2] = 1'b0;
end 
// selection[ 1 ]
always
begin
	selection[1] = 1'b0;
	selection[1] = #20000 1'b1;
	#20000;
end 
// selection[ 0 ]
always
begin
	selection[0] = 1'b0;
	selection[0] = #10000 1'b1;
	#10000;
end 

ula_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.selection(selection),
	.sampler_tx(sampler)
);

ula_vlg_check_tst tb_out(
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6),
	.p7(p7),
	.p8(p8),
	.sampler_rx(sampler)
);
endmodule

